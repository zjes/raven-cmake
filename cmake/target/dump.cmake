function(dump_target name)
    message(STATUS "------------------------------------------------------------------------------")
    get_target_property(type ${name} TYPE)
    if ("${type}" STREQUAL "INTERFACE_LIBRARY")
        message(STATUS "Target ${name} ${type} -> ${CMAKE_INSTALL_PREFIX}/[${CMAKE_INSTALL_INCLUDEDIR}, ${CMAKE_INSTALL_DATADIR}/cmake/${name}]")
    else()
        raven_get_custom_property(priv ${name} PRIVATE)
        if (priv)
            message(STATUS "Target '${name}' is ${type} (this target will not be installed)")
        else()
            raven_get_custom_property(out ${name} INSTALL_DIR)
            if (NOT out)
                if ("${type}" STREQUAL "EXECUTABLE")
                    get_target_property(out ${name} RUNTIME_OUTPUT_DIRECTORY)
                elseif ("${type}" STREQUAL "STATIC_LIBRARY")
                    get_target_property(out ${name} ARCHIVE_OUTPUT_DIRECTORY)
                else()
                    get_target_property(out ${name} LIBRARY_OUTPUT_DIRECTORY)
                endif()
            endif()
            if (NOT out)
                if ("${type}" STREQUAL "EXECUTABLE")
                    set(out ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})
                else()
                    set(out ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
                endif()
            endif()
            message(STATUS "Target '${name}' is ${type} -> ${out}")
        endif()

        get_target_property(links ${name} LINK_LIBRARIES)
        list(REMOVE_DUPLICATES links)
        if (links)
            message(STATUS "    Dependencies:")
            max_length(max "${links}")
            foreach(lib ${links})
                set(out)
                if (NOT TARGET ${lib})
                    resolve(${lib})
                endif()
                get_target_property(libType ${lib} TYPE)
                if ("${libType}" STREQUAL "SHARED_LIBRARY" OR "${libType}" STREQUAL "STATIC_LIBRARY" OR "${libType}" STREQUAL "UNKNOWN_LIBRARY")
                    get_target_property(out ${lib} IMPORTED_LOCATION)
                    if (CMAKE_BUILD_TYPE AND NOT out)
                        string(TOUPPER ${CMAKE_BUILD_TYPE} up_type)
                        get_target_property(out ${lib} IMPORTED_LOCATION_${up_type})
                    endif()
                    if (NOT out)
                        get_target_property(conf ${lib} IMPORTED_CONFIGURATIONS)
                        if (conf)
                            get_target_property(out ${lib} IMPORTED_LOCATION_${conf})
                        endif()
                    endif()
                endif()
                if ("${libType}" STREQUAL "INTERFACE_LIBRARY")
                    get_target_property(out ${lib} INTERFACE_INCLUDE_DIRECTORIES)
                    if (out)
                        foreach(it ${out})
                            string(REGEX REPLACE "\\$<BUILD_INTERFACE:([^>]+)>" "\\1" out ${it})
                            break()
                        endforeach()
                    endif()
                    get_target_property(dout ${lib} INTERFACE_LINK_LIBRARIES)
                    if (dout)
                        set(out "${out} public deps: ${dout}")
                    endif()
                endif()

                if (NOT out)
                    set(out "Own project, not found yet")
                endif()

                pad_string(str ${max} ${lib})
                message(STATUS "        ${str} : ${out}")
            endforeach()
        endif()
    endif()
endfunction()
